#!/usr/bin/env python
# coding: utf-8

# (python_l1)=
# 
# # Вводная лекция про Python
# 
# Добро пожаловать во вводный блок курса!
# Если у вас есть опыт программирования на `Python`, рекомендуем ознакомиться [с пререквизитами курса](/qmlcourseRU/book/prerequisite.md) -- так вы сможете понять, какие разделы стоит изучить или освежить в памяти перед прохождением курса. Тест можно игнорировать, если вы только начинаете свое знакомство с `Python`.
# 
# Итак, `Python` -- это такой язык программирования, который позволяет сообщить компьютеру о том, что нужно сделать, чтобы достичь некоего результата. За последнее десятилетие он получил быстрое распространение и сейчас является одним из самых популярных языков программирования в мире. Входной порог для его использования достаточно низок: вы можете использовать `Python` для решения своих задач даже если никогда не имели дела с программированием.
# 
# ## Что такое `Python`?
# 
# `Python` -- это язык программирования _общего назначения_, используемый во многих приложениях. Например:
#  - разработка веб-приложений;
#  - создание игр;
#  - продвинутая аналитика данных, в том числе с использованием нейронных сетей;
#  - компьютерная графика;
#  - геофизика;
#  - психология;
#  - химия;
#  - теория графов.
# 
# `Python` используют практически все крупные компании, о которых вы слышите каждый день: Google, Yandex, YouTube, Dropbox, Amazon, Facebook ... список можно продолжать часами.
# 
# ```{figure} /_static/pythonblock/intro_l1/blackhole.png
# :name: blackhole
# :width: 600px
# 
# [Рассчитанная в Python симуляция преломлений света черной дырой](https://github.com/Python-simulation/Black-hole-simulation-using-python)
# ```
# 
# ### Чем примечателен `Python`?
# 
# В основе разностороннего применения и популярности лежит **простота изучения**: все чаще люди начинают свой путь в программировании с `Python`, поскольку он очень **дружелюбен к новичкам** и позволяет максимально быстро перейти к решению целевой задачи.
# 
# Сюда же можно отнести **многообразие библиотек** (или _расширений функциональности_, то есть кода, написанного другими людьми, который вы можете переиспользовать). Хотите изучить физику небесных тел и симулировать их взаимодействия? Можно найти и скачать библиотеку, позволяющую за один вечер провести вычисления, о которых в прошлом веке можно было лишь мечтать. Хотите создать прототип мобильного приложения? И на этот случай есть библиотека. Вам нравится квантовая физика и вы хотите использовать ее вместе с умными компьютерными алгоритмами? Что ж, тогда вы снова по адресу.
# 
# ```{figure} /_static/pythonblock/intro_l1/aero_python.png
# :name: aero_python
# :width: 600px
# 
# [Пример моделирования аэродинамики в Python с помощью библиотеки AeroPython](https://lorenabarba.com/blog/announcing-aeropython/)
# ```
# 
# `Python` -- это **высокоуровневый язык для быстрой разработки и/или прототипирования**, на нем очень удобно проверять гипотезы и идеи. "_Высокоуровневый_" означает, что вам не нужно вникать в устройство компьютера и тонкости взаимодействия с ним, чтобы перейти к задаче. Многое «сделано за вас»: вы работаете с простыми _абстракциями_ (или удобными представлениями), а не боретесь с компьютером из-за непонимания сложностей его устройства.
# 
# Еще один плюс в копилку популярности языка -- это **элегантность и краткость синтаксиса** (принципов написания кода, как будто это абзацы в тексте или колонки в газете). Вместе с вышеупомянутым обилием библиотек вы можете буквально за 5 минут и 10 строк кода -- а это меньше половины листа А4 -- воспроизвести научную статью, в которую вложено несколько человеко-лет. А еще такой синтаксис делает **код легким для чтения, запоминания и понимания**.
# 
# Стоит отметить, что `Python` -- это **интерпретируемый** язык, а значит, компьютер каждый раз перед выполнением программы читает код строчку за строчкой и определяет (интерпретирует), что нужно сделать дальше, не проводя никаких оптимизаций и предварительных расчетов. Это негативно влияет на общую скорость работы: `Python` является одним из самых медленных языков. Тем не менее он отлично подходит для академических целей, например, исследовательской работы или других задач, где скорость работы не является критически важной. Настоящая сила `Python` заключается в том, что это **"язык-клей"**: он обеспечивает удобный доступ к различным библиотекам, написанным на высокоэффективных языках, например, на C/C++, Fortran, CUDA C и других.
# 
# ### И в чем подвох?
# 
# В простоте языка и его доступности для быстрого старта таится одна из проблем: вы _можете не понимать, что происходит внутри_, поэтому иногда бывает сложно разобраться в причинах ошибок и неточностей, возникающих по ходу работы над задачей. В целом к `Python` применим следующий принцип: "**Easy to learn, hard to master**". Возвращаясь к примеру элегантности кода, когда 10 строк кода выполняют всю работу: важно понимать, что за ними стоят еще _сотни_ или даже _тысячи строк кода_, а это может приводить к ситуациям, когда поиск ошибки в минимальном наборе команд растягивается на несколько дней.
# 
# ## Но не пугайтесь!
# 
# В данном блоке мы постараемся дать вам всю необходимую интуицию и теорию для успешного прохождения настоящего курса, ответим на основные вопросы, покажем типовые примеры использования `Python` и разберем классические ошибки.
# 
# Дополнительно отметим, что `Python` хорош и для квантового машинного обучения (`QML`), ради которого весь курс и затеян, в особенности -- для классического машинного обучения (`ML`). В области `ML` этот язык программирования стал де-факто стандартом, который используют практически все специалисты.
# 
# ### Интересные факты
# Еще немного дополнительной информации про `Python`:
#  - Разработчик языка Гвидо ван Россум назвал его в честь популярного британского комедийного телешоу 1970-х «Летающий цирк Монти Пайтона».
#  - Актуальной версией `Python` считаются версии `3.6` и выше (`3.7`, `3.8.12`...). Долгое время (до 2020) года существовал `Python 2`, который ныне не поддерживается и не обновляется. Если вы видите кусок кода на `Python 2` и вам предстоит работать с ним, возможно, сначала придется его переписать, хотя большая часть кода имеет совместимость и работает корректно. В этом курсе мы не будем изучать `Python 2`.
#  - У `Python` огромное сообщество: большинство проблем, с которыми вы можете столкнуться, уже было озвучено и даже решено. Это означает, что используя поисковик, вы можете решить практически все проблемы в течение 10-30 минут. Главное -- научиться правильно формулировать свои вопросы.
#  - При работе с `Python` следует придерживаться принципа "должен существовать один и, желательно, только один очевидный способ сделать это". Другие принципы (`Дзен Питона`) на русском языке -- [по ссылке](https://tyapk.ru/blog/post/the-zen-of-python).
#  - `Python` -- это _открытый проект_, в который каждый может внести изменения (но они должны быть предварительно одобрены), например, [тут](https://mail.python.org/archives/list/python-ideas@python.org/).
#  - Есть целый набор рекомендаций и предложений по улучшению кода (`PEP`, [Python Enhancement Proposals](https://www.python.org/dev/peps/)). Они содержат указания на то, как следует писать код и чего стоит избегать, а также дискуссии о будущих изменениях в языке.
# - Язык постоянно развивается, в нем появляются новые возможности, улучшается производительность (скорость выполнения).
# - Сборник всех существующих в открытом доступе библиотек [находится тут](https://pypi.org/).
# - Если вы столкнетесь с багом (системной ошибкой, вызванной внутренним механизмом языка), то сообщить об этом можно [на специальном сайте](https://bugs.python.org/).
# 
# ```{figure} /_static/pythonblock/intro_l1/cat_at_the_end.png
# :name: cat_at_the_end
# :width: 350px
# 
# Кот для привлечения внимания и в благодарность за то, что вы начали проходить курс и сделали самый сложный шаг -- прошли первую лекцию!
# ```
